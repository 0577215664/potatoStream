'use strict';
const tcp          = require('net');
const util         = require('util');
const EventEmitter = require('events');
/**
 * [Server description]
 * @docs https://tools.ietf.org/html/rfc1928
 * @param {[type]} socket [description]
 */
function Server(options, onRequest){
  if(typeof options === 'function'){
    onRequest = options;
    options   = {};
  }
  if(typeof onRequest){
    this.on('request', onRequest);
  }
  this.server = tcp.createServer(function(socket){
    this.onConnect(socket);
  }.bind(this));
  return this;
};

util.inherits(Server, EventEmitter);

/**
 * The client connects to the server, and sends a version
 * identifier/method selection message:
 * +----+----------+----------+
 * |VER | NMETHODS | METHODS  |
 * +----+----------+----------+
 * | 1  |    1     | 1 to 255 |
 * +----+----------+----------+
 * @dosc https://tools.ietf.org/html/rfc1928#section-3
 * @return {[type]} [description]
 */
Server.prototype.onConnect = function(socket){
  socket.once('data', function(greeting){
    var ver  = greeting[0];
    var len  = greeting[1];
    var mtd  = greeting[2];
    this.emit('connect', {
      version: ver,
      length : len,
      methods: mtd
    });
    //  The server selects from one of the methods given in METHODS, and
    //  sends a METHOD selection message:
    //  +----+--------+
    //  |VER | METHOD |
    //  +----+--------+
    //  | 1  |   1    |
    //  +----+--------+
    socket.write(new Buffer([5, 0]));
    socket.once('data', this.onRequest.bind(this, socket));
  }.bind(this));
};
/**
 * [formatIPv4 description]
 * @param  {[type]} buffer [description]
 * @return {[type]}        [description]
 */
function formatIPv4(buffer) {
  // buffer.length == 4
  return [ 
    buffer[0], 
    buffer[1], 
    buffer[2], 
    buffer[3] 
  ].join('.');
}
/**
 * [formatIPv6 description]
 * @param  {[type]} buffer [description]
 * @return {[type]}        [description]
 */
function formatIPv6(buffer) {
  var parts = [];
  for (var i = 0; i < 16; i += 2)
    parts.push(buffer.readUInt16BE(i).toString(16));
  return parts.join(':');
}
/**
 * [parseAddress description]
 * @param  {[type]} type   [description]
 * @param  {[type]} buffer [description]
 * @return {[type]}        [description]
 * @docs https://tools.ietf.org/html/rfc1928#section-5
 */
 function parseAddress(type, buffer){
  switch (type) {
    case 1: // IPv4 address
      return {
        family: 'IPv4',
        address: formatIPv4(buffer),
        port: buffer.readUInt16BE(4),
      };
      break;
    case 3: // Domain name
      var length = buffer[0];
      return {
        family: 'domain',
        address: buffer.slice(1, length + 1).toString(),
        port: buffer.readUInt16BE(length + 1),
      };
      break;
    case 4: // IPv6 address
      return {
        family: 'IPv6',
        address: formatIPv6(buffer),
        port: buffer.readUInt16BE(16),
      };
      break;
  }
};

/**
* The Server request is formed as follows:
* +----+-----+-------+------+----------+----------+
* |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |
* +----+-----+-------+------+----------+----------+
* | 1  |  1  | X'00' |  1   | Variable |    2     |
* +----+-----+-------+------+----------+----------+
*/
Server.prototype.onRequest = function(socket, request){
  var response = new Buffer(request);
  var ver  = request[0];
  var cmd  = request[1];
  var rsv  = request[2];
  var atyp = request[3];
  var addr = parseAddress(atyp, request.slice(4));
  socket.version  = ver;
  socket.command  = cmd;
  socket.reserved = rsv;
  socket.address  = addr;
  socket.reply = this.response.bind(this, socket, response);
  return this.emit('request', socket);
};

/**
 * [response description]
 * @param  {[type]} socket   [description]
 * @param  {[type]} response [description]
 * @return {[type]}          [description]
 * @docs https://tools.ietf.org/html/rfc1928#section-6
 * +----+-----+-------+------+----------+----------+
 * |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |
 * +----+-----+-------+------+----------+----------+
 * | 1  |  1  | X'00' |  1   | Variable |    2     |
 * +----+-----+-------+------+----------+----------+
 */
Server.prototype.response = function(socket, response, reply){
  response[0] = 0x05;
  response[1] = reply || 0;
  response[2] = 0x00;
  socket.write(response);
  return this;
};

/**
 * [listen description]
 * @param  {[type]} port [description]
 * @return {[type]}      [description]
 */
Server.prototype.listen = function(port){
  this.server.listen.apply(this.server, arguments);
  return this;
};

module.exports = Server;
